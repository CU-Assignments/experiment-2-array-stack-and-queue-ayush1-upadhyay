public class JumpGameII {
    public int jump(int[] nums) {
        int n = nums.length;
        if (n <= 1) {
            return 0; // No jumps needed if the array has 0 or 1 element
        }

        int jumps = 0; // Number of jumps
        int currentEnd = 0; // Current boundary of the farthest reachable index
        int farthest = 0; // Farthest index we can reach

        // Iterate through the array
        for (int i = 0; i < n - 1; i++) {
            // Update the farthest reachable index
            farthest = Math.max(farthest, i + nums[i]);

            // If we reach the current boundary, make a jump
            if (i == currentEnd) {
                jumps++;
                currentEnd = farthest;

                // If we can reach the end, return the number of jumps
                if (currentEnd >= n - 1) {
                    break;
                }
            }
        }

        return jumps;
    }

    public static void main(String[] args) {
        JumpGameII solution = new JumpGameII();

        // Example usage
        int[] nums = {2, 3, 1, 1, 4};
        int result = solution.jump(nums);
        System.out.println("Minimum number of jumps: " + result); // Output: 2
    }
}
